<?xml version="1.0" encoding="UTF-8" ?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at
  
	  http://www.apache.org/licenses/LICENSE-2.0
		  
  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
  
-->
<library>
	<class name="uploadWindowExplorer" extends="labelExplorerBox" labelid="304" docking="true" closable="true" width="264" x="200" height="230">
		<switch>
			<when property="$as3">
				<passthrough>
					import flash.events.*;
					import flash.net.*;
				</passthrough>
			</when>
		</switch>
		<attribute name="fileReference" value="null" />
		
		<handler name="oninit">
			lz.ModeManager.makeModal(this);
			canvas.currentUploadWindow = this;
			if (!fileReference) {
				fileReference = new FileReference();
				fileReference.addEventListener(Event.CANCEL, cancelHandler);
				fileReference.addEventListener(Event.COMPLETE, completeHandler);
				fileReference.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
				fileReference.addEventListener(Event.OPEN, openHandler);
				fileReference.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				fileReference.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);
				fileReference.addEventListener(Event.SELECT, selectHandler);
			}
		</handler>
		
		<handler name="onclose">
			lz.ModeManager.release(this);
		</handler>
		
		<method name="remoteComplete" args="tArrayValueObj">
			if ($debug) Debug.write("remoteComplete ", tArrayValueObj);
			this.progressBar.setValue(100);
			this.upload.setAttribute('enabled', false);
			this.upload.setAttribute("visible", false);
			this.browse.setAttribute("visible", false);
			this.txtFile.setAttribute("visible", false);
			
			if (this._loadToWhiteboard.getValue()) {
				if (tArrayValueObj.isPresentation) {
					var url = this.formatURL(tArrayValueObj.fileHash);
					
					var uploadmoduleimgfolderVar = '/' + tArrayValueObj.fileHash;
					
					if ($debug) Debug.write(url);
					
					canvas._drawarea.loadSWFPresentationSynced(url,tArrayValueObj.fileHash + ".swf",
							  "videoconf1",uploadmoduleimgfolderVar,"files",hib.conferencedomain,1,
							  tArrayValueObj.fileSystemName);
				} else if (tArrayValueObj.isImage) {
					canvas._drawarea.parent.parent.clearAreaAndAddImage(this.generateFileLink(tArrayValueObj.fileHash),0,0,
							canvas.getUrl() +'DownloadHandler',
							tArrayValueObj.fileHash,"videoconf1","/","files",hib.conferencedomain);
				}
			}
			
			if (parent.isdefaultreturn) {
				var tempSendArray = new Array ();
				tempSendArray[0] = 'fileslist';
				var nowTime = new Date();
				var datumsString = nowTime.getHours()+':'+nowTime.getMinutes();
				tempSendArray[1] = datumsString;
				//if ($debug) Debug.write("Setting Message");
				tempSendArray[2] = 'newfile';
				tempSendArray[3] = canvas.currentusename;
				//if ($debug) Debug.write("send: ",tempSendArray);
				canvas.objMessage = tempSendArray;
				canvas.thishib.sendMessageAll.doCall();

			} else {
				parent.returnObj.sendRefresh();
			}
			
			if (parent.fileExplorerRef != null) {
				parent.fileExplorerRef.onClose.sendEvent();
			}
			
			close();
		</method>

		<method name="cancelHandler" args="evt">
		<![CDATA[
			if ($debug) Debug.write('cancelHandler invoked', evt);
		]]>
		</method>
		
		<method name="completeHandler" args="evt">
		<![CDATA[
			if ($debug) Debug.write('completeHandler invoked', evt);
			this.upload.setAttribute('enabled', true);
		]]>
		</method>
		
		<method name="openHandler" args="evt">
		<![CDATA[
			if ($debug) Debug.write('openHandler invoked', evt);
		]]>
		</method>
		
		<method name="progressHandler" args="evt">
		<![CDATA[
			var file:FileReference = FileReference(evt.target);
            if ($debug) Debug.write("progressHandler name=" + file.name + " bytesLoaded=" + evt.bytesLoaded + " bytesTotal=" + evt.bytesTotal);
            var val = evt.bytesLoaded * 100 / evt.bytesTotal;
			this.progressBar.setValue(val);
		]]>
		</method>
	
		<method name="errorHandler" args="evt">
		<![CDATA[
			if ($debug) Debug.write('errorHandler invoked: ', evt);
			new lz.errorPopup(canvas, {error: 'HTTP-ERROR: ' + evt});
			this.close();
	  		var now = new Date();
	  		var datumsString = now.getHours() + ':' + now.getMinutes();
	  		var msg = ['fileslist', now.getHours() + ':' + now.getMinutes(), 'newfile', canvas.currentuser];
	  		//if ($debug) Debug.write("send: ", msg);
	  		canvas.objMessage = msg;
	  		canvas.thishib.sendMessage.doCall();
		]]>
		</method>
	
		<method name="selectHandler" args="evt">
            if ($debug) Debug.write("selectHandler: name=" + fileReference.name);
            fileReference.load();
			this.txtFile.setAttribute('text', fileReference.name);
			this.progressBar.setAttribute('visible', true);
		</method>
		
		<labelText x="10" width="250" y="24" multiline="true" name="txtFileDescr" labelid="594" />
		
		<labelText x="10" fontsize="11" y="60" width="250" name="txtFile" multiline="true" 
				   resize="false" fgcolor="$once{ canvas.getThemeColor('menuTextColor') }" />
	
		<simpleLabelButton fontsize="11" name="browse" x="10" y="100" labelid="596" width="250" height="20">
			<switch>
				<when property="$as3">
					<passthrough>
						import flash.net.FileFilter;
					</passthrough>
				</when>
			</switch>
			<handler name="onclick">
				var zipExt = "*.zip"
					, profileExt = "*.psd;*.tiff;*.bmp;*.svg;*.dpx;*.exr;*.jpg;*.jpeg;*.gif;*.png"
					, pptExt = "*.ppt;*.odp;"
					, docExt = pptExt + ";*.txt;*.pptx;*.odt;*.wpd;*.doc;*.docx;*.rtf;*.ods;*.sxc;*.xls;*.xlsx;*.sxi;*.pdf"
					, vidExt = "*.avi;*.mov;*.flv;*.mp4"
					, imgExt = profileExt + ";*.tga;*.xcf;*.wpg;*.ico;*.ttf;*.pcd;*.pcds;*.ps"
					, allExt = docExt + ";" + vidExt + ";" + imgExt;
	
				parent.fileReference.browse([
					new FileFilter("Allowed Files", allExt)
					, new FileFilter("Documents", docExt)
					, new FileFilter("Videos", vidExt)
					, new FileFilter("Pictures", imgExt)
				]);
			</handler>
		</simpleLabelButton>
	
		<!-- moduleName=videoconf1'; -->
		<simpleLabelButton name="upload" x="10" y="120" labelid="593" width="250" enabled="false" height="20">
			<handler name="onclick">
			<![CDATA[
				if ($debug) Debug.write("Upload of new file", parent.fileReference.name);
				parent.progressBar.setAttribute('visible', false);
				parent.upload.setAttribute('enabled', false);
				parent.browse.setAttribute('enabled', false);
				parent.progress2.startShowing();
				var fold = canvas.currentFileExplorer.getSelectedFolder();
				canvas.currentFileExplorer.createFile(
						parent.fileReference.name
						, parent.fileReference.data
						, parent
						, {
							parentId: fold.fileId
							, name: parent.fileReference.name
							, roomId: fold.roomId
							, ownerId: fold.ownerId
							, type: 'Image' //dummy, will be rewritten
						}
					);
				//if ($debug) Debug.write("bytes???: ", parent.fileReference.data, canvas.currentFileExplorer.getSelectedFolder(), canvas.currentFileExplorer);
			]]>
			</handler>
		</simpleLabelButton>
		
		<method name="formatURL" args="fileHash">
		<![CDATA[
			var uploadmoduleimgfolderVar = '/' + fileHash;
			var downloadurl = canvas.getUrl() + 'DownloadHandler?'
					+ 'fileName=' + encodeURIComponent(fileHash + ".swf")
					+ '&moduleName=' + 'videoconf1'
					+ '&parentPath=' + encodeURIComponent(uploadmoduleimgfolderVar + '/')
					+ '&room_id=files'
					+ '&sid=' + canvas.sessionId;
			//if ($debug) Debug.write("downloadurl: ",downloadurl);
			return downloadurl;
		]]>
		</method>
		
		<method name="generateFileLink" args="fileHash">
		<![CDATA[
			return canvas.getUrl()+'DownloadHandler?' +
					'fileName='+ fileHash +
					'&moduleName='+ "videoconf1" +
					'&parentPath='+ '/' +
					'&room_id=files' +
					'&sid='+canvas.sessionId;
		]]>
		</method>
		
		<method name="createFileComplete" args="event">
			if ($debug) Debug.write("createFileComplete::File has been created!!!!");
			//FIXME TODO remove remoteComplete!!!!!
			
			if ($debug) Debug.write("createFileComplete::0");
			this.upload.setAttribute("visible", false);
			this.browse.setAttribute("visible", false);
			this.txtFile.setAttribute("visible", false);
			
			if ($debug) Debug.write("createFileComplete::1");
			var o = JSON.parse(event.target.data);
			var f = o.fileExplorerItemDTO;
			if ($debug) Debug.write("createFileComplete::2", f);
			if (this._loadToWhiteboard.getValue()) {
				if ($debug) Debug.write("createFileComplete::3");
				if (f.type == 'Presentation') {
					var url = this.formatURL(f.hash);
					
					var uploadmoduleimgfolderVar = '/' + f.hash;
					
					if ($debug) Debug.write(url);
					
					if ($debug) Debug.write("createFileComplete::4");
					canvas._drawarea.loadSWFPresentationSynced(url, f.hash + ".swf",
							  "videoconf1",uploadmoduleimgfolderVar,"files",hib.conferencedomain,1,
							  f.name);
				} else if (f.type == 'Image') {
					if ($debug) Debug.write("createFileComplete::5");
					canvas._drawarea.parent.parent.clearAreaAndAddImage(this.generateFileLink(f.hash),0,0,
							canvas.getUrl() +'DownloadHandler',
							f.hash,"videoconf1","/","files",hib.conferencedomain);
				}
			}
			
			if ($debug) Debug.write("createFileComplete::6");
			var now = new Date();
			canvas.objMessage = ['fileslist', now.getHours() + ':' + now.getMinutes(), 'newfile', canvas.currentusename];
			canvas.thishib.sendMessageAll.doCall();
			
			canvas.currentFileExplorer.getSelectedFolder().refresh();
			if ($debug) Debug.write("createFileComplete::7");
			this.close();
			if ($debug) Debug.write("createFileComplete::8");
		</method>
	
		<method name="createFileError" args="event">
			if ($debug) Debug.error("Error while creating the file!!!!");
			//FIXME TODO check this
			new lz.converterPopup(canvas.main_content._content.inner, {error: event});
		</method>
		
		<view name="progress2" x="10" y="158" width="250" visibility="hidden" height="10" bgcolor="#C6CEDF">
			<attribute name="isStarted" value="false" type="boolean" />
			<method name="startShowing">
				if (!this.isStarted) {
					this.isStarted = true;
					this.status._hide.setAttribute('started', true);
					this.setAttribute("visibility", "visible");
				} else {
					return;
				}
			</method>
			<view x="1" y="1" width="248" height="8" bgcolor="#FFFFFF"/>
			<view name="status" x="1" y="1" height="8" width="248" bgcolor="#D6DEEF">
				
				<animator name="_hide" attribute="opacity" to="0" from="1" duration="1000" started="false">
					<handler name="onstop">
						if (parent["_show"]) {
							parent._show.setAttribute('started', true);
						}
					</handler>
				</animator>
				<animator name="_show" attribute="opacity" to="1" from="0" duration="1000" started="false">
					<handler name="onstop">
						if (parent["_show"]) {
							parent._show.setAttribute('started', true);
						}
					</handler>
				</animator>
			</view>
			<labelText name="percent" align="center" resize="true" y="-18" fontstyle="bold" 
				fontsize="10" fgcolor="#555555" labelid="592"/>
		</view>
				   
		<view name="progressBar" x="10" y="158" width="250" visibility="hidden" height="10" bgcolor="#C6CEDF">
			<view x="1" y="1" width="248" height="8" bgcolor="#FFFFFF"/>
			<view name="status" x="1" y="1" height="8" bgcolor="#D6DEEF"/>
			<method name="setValue" args="value">
				<![CDATA[
					this.setAttribute("visible",true);
					status.setAttribute('width', value * 248 / 100);
					percent.setAttribute('text',Math.round(value) + '%');
				]]>
			</method>
			<text name="percent" align="center" resize="true" y="-18" fontstyle="bold" 
				fontsize="10" fgcolor="#555555" />
		</view>
		
		<labelCheckbox name="_loadToWhiteboard" x="4" y="184" fontsize="11" 
			labelid="1312" value="${ canvas.whiteboardCount &gt; 0 }" enabled="${ canvas.whiteboardCount &gt; 0 }" />
		
		<simpleLabelButton name="_close" x="100" y="204" labelid="595" width="160" height="20">
			<handler name="onclick">
				if ($debug) Debug.write("this.parent: ",this.parent);
				this.parent.close();
			</handler>
		</simpleLabelButton>
	</class>
</library>
